<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Die Evolution der Cannabis-Sorten: Eine interaktive Chronik</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Earthy Neutral -->
    <!-- Application Structure Plan: The application uses an interactive network graph to visualize the genetic relationships and chronological evolution of cannabis strains, moving beyond the linear structure of the source report. The main view shows the entire 'family tree'. Clicking a strain (node) populates a dedicated detail panel with its story and lineage, while also highlighting its direct ancestors and descendants in the graph. Era-based filters allow users to simplify the network and focus on specific periods. This interactive, non-linear structure was chosen to facilitate user-driven exploration and a deeper understanding of the complex interconnections between strains, which a static text format cannot achieve. -->
    <!-- Visualization & Content Choices: Main Visualization: A custom HTML Canvas graph is used to represent the strain network. Goal: Show complex relationships and chronology. Method: Vanilla JS for drawing nodes, edges, and handling interactions. Interaction: Click to select, hover for tooltips, filters to redraw. Justification: Full control over layout and styling for a clear, bespoke visualization of the genetic tree. Detail Panel: A dynamic HTML block. Goal: Provide deep context. Method: JS updates innerHTML. Justification: Standard and efficient. Filters: HTML buttons. Goal: Simplify the view. Method: JS event listeners redraw the canvas. Justification: Intuitive UI. CONFIRMATION: NO SVG/Mermaid used. All visuals are rendered on the Canvas or built with styled HTML. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #FDFBF8;
            color: #4A4A4A;
        }
        .active-filter {
            background-color: #8D9B6A !important;
            color: #FFFFFF !important;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
        .content-panel {
            scrollbar-width: thin;
            scrollbar-color: #8D9B6A #FDFBF8;
        }
        .content-panel::-webkit-scrollbar {
            width: 8px;
        }
        .content-panel::-webkit-scrollbar-track {
            background: #FDFBF8;
        }
        .content-panel::-webkit-scrollbar-thumb {
            background-color: #8D9B6A;
            border-radius: 10px;
            border: 3px solid #FDFBF8;
        }
        canvas {
            cursor: pointer;
        }
    </style>
</head>
<body class="min-h-screen antialiased">
    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-[#606C38] mb-2">Die Evolution der Cannabis-Sorten</h1>
            <p class="text-lg text-gray-600 max-w-3xl mx-auto">Eine interaktive Chronik der Z√ºchtung. Klicken Sie auf eine Sorte im Stammbaum, um ihre Geschichte und ihre genetischen Verbindungen zu entdecken.</p>
        </header>

        <nav class="flex flex-wrap justify-center gap-2 mb-8">
            <button data-era="all" class="filter-btn px-4 py-2 text-sm font-medium rounded-full bg-white text-gray-700 hover:bg-gray-100 transition-all duration-300 shadow-sm active-filter">Alle Epochen</button>
            <button data-era="landrassen" class="filter-btn px-4 py-2 text-sm font-medium rounded-full bg-white text-gray-700 hover:bg-gray-100 transition-all duration-300 shadow-sm">Landrassen</button>
            <button data-era="1970" class="filter-btn px-4 py-2 text-sm font-medium rounded-full bg-white text-gray-700 hover:bg-gray-100 transition-all duration-300 shadow-sm">1970er</button>
            <button data-era="1980" class="filter-btn px-4 py-2 text-sm font-medium rounded-full bg-white text-gray-700 hover:bg-gray-100 transition-all duration-300 shadow-sm">1980er</button>
            <button data-era="1990" class="filter-btn px-4 py-2 text-sm font-medium rounded-full bg-white text-gray-700 hover:bg-gray-100 transition-all duration-300 shadow-sm">1990er</button>
            <button data-era="2000" class="filter-btn px-4 py-2 text-sm font-medium rounded-full bg-white text-gray-700 hover:bg-gray-100 transition-all duration-300 shadow-sm">2000+</button>
        </nav>

        <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div class="lg:col-span-2 bg-white rounded-2xl shadow-lg p-4 h-[60vh] md:h-[70vh] lg:h-auto">
                <canvas id="strain-tree"></canvas>
            </div>

            <aside id="details-panel" class="lg:col-span-1 bg-white rounded-2xl shadow-lg p-6 content-panel overflow-y-auto h-[60vh] lg:h-[75vh]">
                <div id="panel-content" class="transition-opacity duration-500 opacity-100">
                    <h2 class="text-2xl font-bold text-[#606C38] mb-3">Willkommen!</h2>
                    <p class="text-gray-600">Dies ist eine visuelle Reise durch die Geschichte der Cannabis-Z√ºchtung. Der Stammbaum links zeigt die wichtigsten Sorten und ihre genetischen Verbindungen.</p>
                    <div class="mt-4 p-4 bg-[#FDFBF8] rounded-lg">
                        <h3 class="font-semibold text-gray-700">So funktioniert's:</h3>
                        <ul class="list-disc list-inside mt-2 space-y-1 text-sm text-gray-600">
                            <li><b>Klicken Sie auf einen Kreis (Sorte)</b>, um hier Details anzuzeigen.</li>
                            <li><b>Verwenden Sie die Filter oben</b>, um die Ansicht auf bestimmte Epochen zu beschr√§nken.</li>
                            <li><b>Hervorgehobene Linien</b> zeigen die Abstammung der ausgew√§hlten Sorte.</li>
                        </ul>
                    </div>
                    <div class="mt-6 text-center">
                        <span class="text-5xl">üåø</span>
                    </div>
                </div>
            </aside>
        </main>
    </div>

    <script>
        const strainData = [
            { id: 'afghani', name: 'Afghani', era: 'landrassen', type: 'indica', parents: [], story: 'Eine robuste Indica-Landrasse aus den Bergen Afghanistans, bekannt f√ºr ihre dichte Harzproduktion und entspannende Wirkung. Sie ist ein fundamentaler Baustein f√ºr unz√§hlige Hybriden.' },
            { id: 'thai', name: 'Thai', era: 'landrassen', type: 'sativa', parents: [], story: 'Eine reine Sativa-Landrasse aus Thailand, ber√ºhmt f√ºr ihre energetische und zerebrale Wirkung. Ihre hohe, schlanke Statur ist eine Anpassung an das tropische Klima.' },
            { id: 'colombian_gold', name: 'Colombian Gold', era: 'landrassen', type: 'sativa', parents: [], story: 'Eine legend√§re Sativa aus Kolumbien, die in den 60er und 70er Jahren popul√§r wurde. Bekannt f√ºr ihr erhebendes High und ihre goldenen Bl√ºten.' },
            { id: 'acapulco_gold', name: 'Acapulco Gold', era: 'landrassen', type: 'sativa', parents: [], story: 'Eine ikonische Sativa-Landrasse aus Mexiko. Ihr Name leitet sich von der gold-orangen F√§rbung der Bl√ºten ab und sie war f√ºr ihre euphorische Wirkung bekannt.' },
            
            { id: 'skunk1', name: 'Skunk #1', era: '1970', type: 'hybrid', parents: ['afghani', 'acapulco_gold', 'colombian_gold'], story: 'Einer der ersten stabilen Hybriden, entwickelt um 1973 von Sam "The Skunkman" und Sacred Seeds in Kalifornien. Kombinierte die kurze Bl√ºtezeit der Afghani mit der erhebenden Wirkung der Sativas. Ihr stechender Geruch gab ihr den Namen.' },
            { id: 'original_haze', name: 'Original Haze', era: '1970', type: 'sativa', parents: ['colombian_gold', 'thai'], story: 'Gez√ºchtet von den "Haze Brothers" in Santa Cruz. Eine reine Sativa-Kreuzung mit Genetik aus Kolumbien, Mexiko, S√ºdindien und Thailand. Ber√ºhmt f√ºr ihre psychedelische Wirkung, aber auch f√ºr ihre extrem lange Bl√ºtezeit.' },
            { id: 'northern_lights', name: 'Northern Lights', era: '1970', type: 'indica', parents: ['afghani'], story: 'Entwickelt von "The Indian" nahe Seattle. Eine fast reine Afghani-Indica, die f√ºr ihre extreme Harzproduktion, schnelle Bl√ºte und entspannende Wirkung bekannt wurde. Perfekt f√ºr den Indoor-Anbau.' },
            
            { id: 'nevilles_haze', name: "Neville's Haze", era: '1980', type: 'hybrid', parents: ['original_haze', 'northern_lights'], story: 'Eine Meisterleistung von Nevil Schoenmakers in Amsterdam. Er kreuzte die unpraktische Haze mit der stabilen Northern Lights, um die Bl√ºtezeit zu verk√ºrzen. Das Ergebnis war eine legend√§re Sativa-dominante Sorte, die die Cannabis Cups dominierte.' },
            
            { id: 'og_kush', name: 'OG Kush', era: '1990', type: 'hybrid', parents: [], story: 'Entstand Anfang der 90er in Florida und wurde in L.A. von Josh D perfektioniert. Ihr komplexes Aroma von Treibstoff und Kiefer und ihre potente Wirkung machten sie zu einer Legende der Westk√ºste. "OG" steht f√ºr "Original".' },
            { id: 'white_widow', name: 'White Widow', originalName: "Arnhem's Wonder / Black Widow", era: '1990', type: 'hybrid', parents: [], story: '1994 in Amsterdam von der Green House Seed Company ver√∂ffentlicht. Eine Kreuzung aus einer brasilianischen Sativa und einem s√ºdindischen Indica-Hybriden. Ihr Name stammt von der extremen Harzproduktion. Der urspr√ºngliche Z√ºchter Shantibaba nannte seine Version sp√§ter "Black Widow".' },
            { id: 'super_silver_haze', name: 'Super Silver Haze', era: '1990', type: 'hybrid', parents: ['skunk1', 'nevilles_haze'], story: 'Eine preisgekr√∂nte Sorte, entwickelt von Shantibaba und Nevil. Sie kombiniert die Genetik von Skunk, Northern Lights und Haze und wurde Ende der 90er Jahre zum Inbegriff einer potenten, komplexen Sativa.' },
            
            { id: 'lowryder', name: 'Lowryder', originalName: "Willy's Automatic", era: '2000', type: 'auto', parents: ['northern_lights'], story: 'Die erste kommerziell erfolgreiche Autoflowering-Sorte, gez√ºchtet vom "Joint Doctor". Durch die Kreuzung mit Cannabis Ruderalis bl√ºht sie automatisch nach Alter, nicht nach Lichtzyklus. Dies revolutionierte den Anbau in k√§lteren Klimazonen.' },
            { id: 'cannatonic', name: 'Cannatonic', era: '2000', type: 'cbd', parents: [], story: 'Eine der ersten Sorten mit einem ausgewogenen 1:1-Verh√§ltnis von THC zu CBD, entwickelt von Resin Seeds in Spanien um 2008. Sie startete die CBD-Bewegung, indem sie therapeutischen Nutzen ohne starken Rausch bot.' },
        ];

        const canvas = document.getElementById('strain-tree');
        const ctx = canvas.getContext('2d');
        const detailsPanel = document.getElementById('details-panel');
        const panelContent = document.getElementById('panel-content');
        const filterBtns = document.querySelectorAll('.filter-btn');

        let nodes = [];
        let selectedNodeId = null;
        let activeEra = 'all';

        const eraColumns = {
            'landrassen': 0.1,
            '1970': 0.3,
            '1980': 0.5,
            '1990': 0.7,
            '2000': 0.9
        };

        const colors = {
            indica: '#6A8D9B',
            sativa: '#D9A566',
            hybrid: '#8D9B6A',
            auto: '#A98B99',
            cbd: '#B8A6D9',
            default: '#BDBDBD',
            line: '#D1D5DB',
            highlight: '#606C38',
            text: '#FFFFFF',
            labelText: '#374151'
        };

        function setupCanvas() {
            const dpr = window.devicePixelRatio || 1;
            const rect = canvas.parentElement.getBoundingClientRect();
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            ctx.scale(dpr, dpr);
            canvas.style.width = `${rect.width}px`;
            canvas.style.height = `${rect.height}px`;
            
            calculateNodePositions();
            draw();
        }

        function calculateNodePositions() {
            nodes = [];
            const eraCounts = {};
            strainData.forEach(strain => {
                if (!eraCounts[strain.era]) eraCounts[strain.era] = { count: 0, total: 0 };
                eraCounts[strain.era].total++;
            });

            strainData.forEach(strain => {
                const columnX = eraColumns[strain.era] * canvas.parentElement.offsetWidth;
                const eraCount = eraCounts[strain.era];
                const rowY = ((eraCount.count + 1) / (eraCount.total + 1)) * canvas.parentElement.offsetHeight;
                eraCount.count++;
                
                const radius = Math.min(canvas.parentElement.offsetWidth, canvas.parentElement.offsetHeight) / 25;

                nodes.push({
                    ...strain,
                    x: columnX,
                    y: rowY,
                    radius: radius
                });
            });
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const visibleNodes = nodes.filter(n => activeEra === 'all' || n.era === activeEra);
            const visibleNodeIds = new Set(visibleNodes.map(n => n.id));
            
            const selectedNode = nodes.find(n => n.id === selectedNodeId);
            const ancestors = new Set();
            const descendants = new Set();

            if (selectedNode) {
                findAncestors(selectedNode, ancestors);
                findDescendants(selectedNode, descendants);
            }

            // Draw lines
            nodes.forEach(node => {
                node.parents.forEach(parentId => {
                    const parentNode = nodes.find(p => p.id === parentId);
                    if (parentNode && (activeEra === 'all' || (visibleNodeIds.has(node.id) && visibleNodeIds.has(parentNode.id)))) {
                        ctx.beginPath();
                        ctx.moveTo(parentNode.x, parentNode.y);
                        ctx.lineTo(node.x, node.y);
                        
                        const isAncestor = ancestors.has(node.id) && ancestors.has(parentNode.id);
                        const isDescendant = descendants.has(node.id) && descendants.has(parentNode.id);

                        ctx.strokeStyle = (isAncestor || isDescendant) ? colors.highlight : colors.line;
                        ctx.lineWidth = (isAncestor || isDescendant) ? 3 : 1.5;
                        ctx.stroke();
                    }
                });
            });

            // Draw nodes
            visibleNodes.forEach(node => {
                ctx.beginPath();
                ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
                
                const isSelected = node.id === selectedNodeId;
                const isRelated = ancestors.has(node.id) || descendants.has(node.id);

                ctx.fillStyle = colors[node.type] || colors.default;
                ctx.fill();

                if (isSelected || isRelated) {
                    ctx.strokeStyle = colors.highlight;
                    ctx.lineWidth = isSelected ? 4 : 2.5;
                    ctx.stroke();
                }

                // Draw text
                ctx.fillStyle = colors.text;
                ctx.font = `bold ${node.radius * 0.5}px Inter`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                const nameParts = node.name.split(' ');
                if (nameParts.length > 1) {
                    ctx.fillText(nameParts[0], node.x, node.y - node.radius * 0.3);
                    ctx.fillText(nameParts[1], node.x, node.y + node.radius * 0.3);
                } else {
                    ctx.fillText(node.name, node.x, node.y);
                }
            });
        }
        
        function findAncestors(node, ancestorsSet) {
            ancestorsSet.add(node.id);
            node.parents.forEach(parentId => {
                const parentNode = nodes.find(p => p.id === parentId);
                if (parentNode) {
                    findAncestors(parentNode, ancestorsSet);
                }
            });
        }

        function findDescendants(node, descendantsSet) {
            descendantsSet.add(node.id);
            nodes.forEach(childNode => {
                if (childNode.parents.includes(node.id)) {
                    findDescendants(childNode, descendantsSet);
                }
            });
        }

        function updateDetailsPanel(node) {
            panelContent.style.opacity = 0;
            setTimeout(() => {
                if (node) {
                    const parentNames = node.parents
                        .map(pId => nodes.find(p => p.id === pId)?.name)
                        .filter(Boolean)
                        .join(', ') || 'Unbekannt (Landrasse)';

                    panelContent.innerHTML = `
                        <span class="inline-block px-3 py-1 text-xs font-semibold text-white rounded-full" style="background-color: ${colors[node.type] || colors.default};">${node.type.charAt(0).toUpperCase() + node.type.slice(1)}</span>
                        <h2 class="text-3xl font-bold text-[#606C38] mt-2">${node.name}</h2>
                        ${node.originalName ? `<p class="text-sm text-gray-500 -mt-1 mb-3">Auch bekannt als: ${node.originalName}</p>` : '<div class="mb-3"></div>'}
                        <p class="text-gray-600">${node.story}</p>
                        <div class="mt-4 pt-4 border-t border-gray-200">
                            <h3 class="font-semibold text-gray-700">Genetische Abstammung:</h3>
                            <p class="text-gray-600 text-sm">${parentNames}</p>
                        </div>
                    `;
                } else {
                     panelContent.innerHTML = `
                        <h2 class="text-2xl font-bold text-[#606C38] mb-3">Willkommen!</h2>
                        <p class="text-gray-600">Dies ist eine visuelle Reise durch die Geschichte der Cannabis-Z√ºchtung. Der Stammbaum links zeigt die wichtigsten Sorten und ihre genetischen Verbindungen.</p>
                        <div class="mt-4 p-4 bg-[#FDFBF8] rounded-lg">
                            <h3 class="font-semibold text-gray-700">So funktioniert's:</h3>
                            <ul class="list-disc list-inside mt-2 space-y-1 text-sm text-gray-600">
                                <li><b>Klicken Sie auf einen Kreis (Sorte)</b>, um hier Details anzuzeigen.</li>
                                <li><b>Verwenden Sie die Filter oben</b>, um die Ansicht auf bestimmte Epochen zu beschr√§nken.</li>
                                <li><b>Hervorgehobene Linien</b> zeigen die Abstammung der ausgew√§hlten Sorte.</li>
                            </ul>
                        </div>
                        <div class="mt-6 text-center">
                            <span class="text-5xl">üåø</span>
                        </div>
                    `;
                }
                panelContent.style.opacity = 1;
            }, 300);
        }

        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            let clickedNode = null;
            const visibleNodes = nodes.filter(n => activeEra === 'all' || n.era === activeEra);
            
            for (const node of visibleNodes) {
                const distance = Math.sqrt((x - node.x) ** 2 + (y - node.y) ** 2);
                if (distance < node.radius) {
                    clickedNode = node;
                    break;
                }
            }

            if (clickedNode) {
                selectedNodeId = clickedNode.id;
            } else {
                selectedNodeId = null;
            }
            
            updateDetailsPanel(clickedNode);
            draw();
        });

        filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                filterBtns.forEach(b => b.classList.remove('active-filter'));
                btn.classList.add('active-filter');
                activeEra = btn.dataset.era;
                selectedNodeId = null;
                updateDetailsPanel(null);
                draw();
            });
        });

        window.addEventListener('resize', setupCanvas);
        
        setupCanvas();
    </script>
</body>
</html>
